const modal = new Modal();
  [
    {
      name: 'test',
      html: `
        <div >
          <div class=wrapper >
            <div class=content >
              <div><h1>Hello World!!!</h1></div>
            </div>
            <div class=close >
              <button ref=closeBtn >Close</button>
            </div>
          </div>
        </div>`,
      handler: {
        beforeCreated: function(HTMLstring) {
          return HTMLstring;
        },
        beforeRegister: function(windowInstance) {
         return void
        },
        onshow: function() {
          return void
        },
        onhide: function() {
          return void
        },
        clean: function() {
          return void
        }
      }
    }
  ].forEach(function(m) {

      modal.add(m);

  });



  const t = modal.prepare("test");
  modal.find(t).show(document.body);
  modal.find(t).preserve = false;
  
  when modal.find("test") the returns window's prototype
  when modal.find(t) then returns window instance

  
  preserve => remove... or not remove, window from register

  beforeCreated   => Hook before prototype was created
    returns => HTMLstring
  beforeRegister  => Hook before modal was registered
  onshow   => Hook before node was inserted in to DOM
  onhide   => Hook before node was removed from DOM
  clean    => Hook after modal instance was removed from register